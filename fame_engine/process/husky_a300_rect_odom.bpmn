<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="sid-38422fae-e03e-43a3-bef4-bd33b32041b2" targetNamespace="http://bpmn.io/bpmn" exporter="bpmn-js-token-simulation" exporterVersion="0.1.5">
  <bpmn:process id="Process_1" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1y45yut" name="start">
      <bpmn:outgoing>Flow_17sy678</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:scriptTask id="Activity_0q0spcq" name="go front1_20sec" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_17sy678</bpmn:incoming>
      <bpmn:outgoing>Flow_0qr4lpj</bpmn:outgoing>
      <bpmn:script>
      // Assumes: rclnodejs Node is available as this.environment.variables.ros_node
      // Publishes: geometry_msgs/msg/TwistStamped on /cmd_vel
      // Subscribes: nav_msgs/msg/Odometry on /odom

      const node = this.environment.variables.ros_node;

      // ==== User-tunable params ====
      const hz = 200;                      // control loop frequency [Hz]
      const duration_s = 10;                // hard stop safety duration
      const targetYawRad = 2*Math.PI;            // desired yaw (radians). Update at runtime if you like.
      const targetLinear = 1.5;            // desired forward speed [m/s] (set &gt;0 to drive while holding heading)

      // PID gains for yaw control (start modest; tune on your robot)
      const Kp = 1.8;
      const Ki = 0.1;
      const Kd = 0.0;

      // Output/slew limits
      const maxAngVel = 0.7;               // [rad/s]
      const maxAngAcc = 1.0;               // [rad/s^2] change allowed
      const maxLinVel = 0.7;               // [m/s]
      const maxLinAcc = 0.7;               // [m/s^2]

      // Deadbands and finishing criteria
      const yawDeadband = 0.03;            // [rad] ~0.6°*3
      const finishYawError = 0.02;         // [rad] ~1.1°
      const finishHoldTime_s = 0.3;        // [s] hold within finish error before stopping

      // Watchdog
      const odomTimeout_s = 0.25;          // stop if odom older than this
      const frame_id = "base_link";        // header.frame_id for TwistStamped

      // ==== Helpers ====
      function nowStamp() {
        const ms = Date.now();
        return { sec: Math.floor(ms / 1000), nanosec: (ms % 1000) * 1e6 };
      }
      function normAnglePi(a) {
        // wrap to -pi, pi
        const TWO_PI = Math.PI * 2;
        a = ((a + Math.PI) % TWO_PI + TWO_PI) % TWO_PI - Math.PI;
        return a;
      }
      function quatYaw(q) {
        // q: {x,y,z,w}
        const { x, y, z, w } = q;
        // yaw (Z) from quaternion
        const siny_cosp = 2 * (w * z + x * y);
        const cosy_cosp = 1 - 2 * (y * y + z * z);
        return Math.atan2(siny_cosp, cosy_cosp);
      }
      function clamp(v, lo, hi) { return Math.max(lo, Math.min(hi, v)); }

      // ==== State ====
      let lastOdom = null;      // {t_ms, x,y,theta, vx, wz}
      let lastCmd = { lin: 0, ang: 0 };
      let integ = 0;
      let prevErr = 0;
      let finishStartMs = null;

      // ==== Subscribers ====
      node.createSubscription("nav_msgs/msg/Odometry", "odom", (msg) =&gt; {
        // pull out what we need (avoid keeping the entire message object)
        try {
          const p = msg.pose.pose.position;
          const q = msg.pose.pose.orientation;
          const t = msg.twist.twist;
          const theta = quatYaw(q);
          lastOdom = {
            t_ms: Date.now(),
            x: p.x, y: p.y, theta,
            vx: t.linear.x,
            wz: t.angular.z
          };
          // Optionally expose for debugging
          this.environment.variables.odom_pose = msg.pose;
          this.environment.variables.odom_twist = msg.twist;
        } catch (e) {
          this.environment.services.console.log("Odom parse error: " + e);
        }
      });
      this.environment.services.console.log("Listening for nav_msgs/msg/Odometry on \"odom\".");

      // ==== Publisher ====
      const pub = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      // ==== Timing ====
      const period_s = 1.0 / hz;
      const period_ns_bigint = BigInt(Math.round(1_000_000_000 / hz));
      const duration_ns_bigint = BigInt(Math.round(duration_s * 1_000_000_000));

      // ==== Controller loop ====
      function publishCmd(lin, ang) {
        pub.publish({
          header: { stamp: nowStamp(), frame_id },
          twist: {
            linear: { x: lin, y: 0.0, z: 0.0 },
            angular: { x: 0.0, y: 0.0, z: ang }
          }
        });
        lastCmd = { lin, ang };
      }

      function controlTick() {
        const t_ms = Date.now();

        // Watchdog: stop if odom stale
        if (!lastOdom || (t_ms - lastOdom.t_ms) / 1000.0 &gt; odomTimeout_s) {
          integ = 0; prevErr = 0; finishStartMs = null;
          if (Math.abs(lastCmd.lin) &gt; 1e-6 || Math.abs(lastCmd.ang) &gt; 1e-6) {
            publishCmd(0.0, 0.0);
          }
          return;
        }

        // Yaw control
        const yaw = lastOdom.theta;
        let err = normAnglePi(targetYawRad - yaw);

        // Deadband to avoid chatter
        if (Math.abs(err) &lt; yawDeadband) err = 0;

        // PID with basic anti-windup (only integrate when not saturated later)
        integ += err * period_s;
        const deriv = (err - prevErr) / period_s;
        let u = Kp * err + Ki * integ + Kd * deriv;

        // Saturate angular velocity
        let angCmd = clamp(u, -maxAngVel, +maxAngVel);

        // Anti-windup: if saturated, back off integral a bit
        if (u !== angCmd) {
          // bleed integrator towards zero to prevent windup
          integ *= 0.9;
        }

        // Slew-rate limit angular velocity
        const maxDeltaAng = maxAngAcc * period_s;
        const deltaAng = clamp(angCmd - lastCmd.ang, -maxDeltaAng, +maxDeltaAng);
        angCmd = lastCmd.ang + deltaAng;

        // Linear command with slew &amp; limit
        let linTarget = clamp(targetLinear, -maxLinVel, +maxLinVel);
        const maxDeltaLin = maxLinAcc * period_s;
        const deltaLin = clamp(linTarget - lastCmd.lin, -maxDeltaLin, +maxDeltaLin);
        let linCmd = lastCmd.lin + deltaLin;

        // Finish logic (only if you re doing a point-turn or precise heading)
        const withinFinish = Math.abs(err) &lt;= finishYawError;
        if (withinFinish) {
          if (finishStartMs == null) finishStartMs = t_ms;
          const held_s = (t_ms - finishStartMs) / 1000.0;
          if (held_s &gt;= finishHoldTime_s &amp;&amp; Math.abs(linTarget) &lt; 1e-6) {
            // stop and freeze controller
            publishCmd(0.0, 0.0);
            return;
          }
        } else {
          finishStartMs = null;
        }

        publishCmd(linCmd, angCmd);
      }

      // ROS timer for control loop (BigInt nanoseconds)
      const ctlTimer = node.createTimer(period_ns_bigint, controlTick);

      // Safety timer to stop after duration_s (optional; remove if not desired)
      const stopTimer = node.createTimer(duration_ns_bigint, () =&gt; {
        ctlTimer.cancel();
        publishCmd(0.0, 0.0);
        stopTimer.cancel();
        if (typeof next === "function") next();
      });

      // For visibility in your env
      //this.environment.variables.nextTimerDuration = "PT"+duration_s+"S";
      this.environment.variables.nextTimerDuration = "PT1S";
      this.environment.services.console.log(
        "Control loop "+hz+" Hz, target yaw "+targetYawRad.toFixed(3)+" rad, target v="+targetLinear+" m/s, safety "+duration_s+"s."
      );

      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_17sy678" sourceRef="StartEvent_1y45yut" targetRef="Activity_0q0spcq" />
    <bpmn:scriptTask id="Activity_1wg18x7" name="turn right1" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0qr4lpj</bpmn:incoming>
      <bpmn:outgoing>Flow_0bt1i2p</bpmn:outgoing>
      <bpmn:script>
      // Assumes: rclnodejs Node is available as this.environment.variables.ros_node
      // Publishes: geometry_msgs/msg/TwistStamped on /cmd_vel
      // Subscribes: nav_msgs/msg/Odometry on /odom

      const node = this.environment.variables.ros_node;

      // ==== User-tunable params ====
      const hz = 200;                      // control loop frequency [Hz]
      const duration_s = 5;                // hard stop safety duration
      const targetYawRad = (3/2)*Math.PI;            // desired yaw (radians). Update at runtime if you like.
      const targetLinear = 0.0;            // desired forward speed [m/s] (set &gt;0 to drive while holding heading)

      // PID gains for yaw control (start modest; tune on your robot)
      const Kp = 1.8;
      const Ki = 0.1;
      const Kd = 0.0;

      // Output/slew limits
      const maxAngVel = 0.7;               // [rad/s]
      const maxAngAcc = 1.0;               // [rad/s^2] change allowed
      const maxLinVel = 0.7;               // [m/s]
      const maxLinAcc = 0.7;               // [m/s^2]

      // Deadbands and finishing criteria
      const yawDeadband = 0.03;            // [rad] ~0.6°*3
      const finishYawError = 0.02;         // [rad] ~1.1°
      const finishHoldTime_s = 0.3;        // [s] hold within finish error before stopping

      // Watchdog
      const odomTimeout_s = 0.25;          // stop if odom older than this
      const frame_id = "base_link";        // header.frame_id for TwistStamped

      // ==== Helpers ====
      function nowStamp() {
        const ms = Date.now();
        return { sec: Math.floor(ms / 1000), nanosec: (ms % 1000) * 1e6 };
      }
      function normAnglePi(a) {
        // wrap to -pi, pi
        const TWO_PI = Math.PI * 2;
        a = ((a + Math.PI) % TWO_PI + TWO_PI) % TWO_PI - Math.PI;
        return a;
      }
      function quatYaw(q) {
        // q: {x,y,z,w}
        const { x, y, z, w } = q;
        // yaw (Z) from quaternion
        const siny_cosp = 2 * (w * z + x * y);
        const cosy_cosp = 1 - 2 * (y * y + z * z);
        return Math.atan2(siny_cosp, cosy_cosp);
      }
      function clamp(v, lo, hi) { return Math.max(lo, Math.min(hi, v)); }

      // ==== State ====
      let lastOdom = null;      // {t_ms, x,y,theta, vx, wz}
      let lastCmd = { lin: 0, ang: 0 };
      let integ = 0;
      let prevErr = 0;
      let finishStartMs = null;

      // ==== Subscribers ====
      node.createSubscription("nav_msgs/msg/Odometry", "odom", (msg) =&gt; {
        // pull out what we need (avoid keeping the entire message object)
        try {
          const p = msg.pose.pose.position;
          const q = msg.pose.pose.orientation;
          const t = msg.twist.twist;
          const theta = quatYaw(q);
          lastOdom = {
            t_ms: Date.now(),
            x: p.x, y: p.y, theta,
            vx: t.linear.x,
            wz: t.angular.z
          };
          // Optionally expose for debugging
          this.environment.variables.odom_pose = msg.pose;
          this.environment.variables.odom_twist = msg.twist;
        } catch (e) {
          this.environment.services.console.log("Odom parse error: " + e);
        }
      });
      this.environment.services.console.log("Listening for nav_msgs/msg/Odometry on \"odom\".");

      // ==== Publisher ====
      const pub = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      // ==== Timing ====
      const period_s = 1.0 / hz;
      const period_ns_bigint = BigInt(Math.round(1_000_000_000 / hz));
      const duration_ns_bigint = BigInt(Math.round(duration_s * 1_000_000_000));

      // ==== Controller loop ====
      function publishCmd(lin, ang) {
        pub.publish({
          header: { stamp: nowStamp(), frame_id },
          twist: {
            linear: { x: lin, y: 0.0, z: 0.0 },
            angular: { x: 0.0, y: 0.0, z: ang }
          }
        });
        lastCmd = { lin, ang };
      }

      function controlTick() {
        const t_ms = Date.now();

        // Watchdog: stop if odom stale
        if (!lastOdom || (t_ms - lastOdom.t_ms) / 1000.0 &gt; odomTimeout_s) {
          integ = 0; prevErr = 0; finishStartMs = null;
          if (Math.abs(lastCmd.lin) &gt; 1e-6 || Math.abs(lastCmd.ang) &gt; 1e-6) {
            publishCmd(0.0, 0.0);
          }
          return;
        }

        // Yaw control
        const yaw = lastOdom.theta;
        let err = normAnglePi(targetYawRad - yaw);

        // Deadband to avoid chatter
        if (Math.abs(err) &lt; yawDeadband) err = 0;

        // PID with basic anti-windup (only integrate when not saturated later)
        integ += err * period_s;
        const deriv = (err - prevErr) / period_s;
        let u = Kp * err + Ki * integ + Kd * deriv;

        // Saturate angular velocity
        let angCmd = clamp(u, -maxAngVel, +maxAngVel);

        // Anti-windup: if saturated, back off integral a bit
        if (u !== angCmd) {
          // bleed integrator towards zero to prevent windup
          integ *= 0.9;
        }

        // Slew-rate limit angular velocity
        const maxDeltaAng = maxAngAcc * period_s;
        const deltaAng = clamp(angCmd - lastCmd.ang, -maxDeltaAng, +maxDeltaAng);
        angCmd = lastCmd.ang + deltaAng;

        // Linear command with slew &amp; limit
        let linTarget = clamp(targetLinear, -maxLinVel, +maxLinVel);
        const maxDeltaLin = maxLinAcc * period_s;
        const deltaLin = clamp(linTarget - lastCmd.lin, -maxDeltaLin, +maxDeltaLin);
        let linCmd = lastCmd.lin + deltaLin;

        // Finish logic (only if you re doing a point-turn or precise heading)
        const withinFinish = Math.abs(err) &lt;= finishYawError;
        if (withinFinish) {
          if (finishStartMs == null) finishStartMs = t_ms;
          const held_s = (t_ms - finishStartMs) / 1000.0;
          if (held_s &gt;= finishHoldTime_s &amp;&amp; Math.abs(linTarget) &lt; 1e-6) {
            // stop and freeze controller
            publishCmd(0.0, 0.0);
            return;
          }
        } else {
          finishStartMs = null;
        }

        publishCmd(linCmd, angCmd);
      }

      // ROS timer for control loop (BigInt nanoseconds)
      const ctlTimer = node.createTimer(period_ns_bigint, controlTick);

      // Safety timer to stop after duration_s (optional; remove if not desired)
      const stopTimer = node.createTimer(duration_ns_bigint, () =&gt; {
        ctlTimer.cancel();
        publishCmd(0.0, 0.0);
        stopTimer.cancel();
        if (typeof next === "function") next();
      });

      // For visibility in your env
      //this.environment.variables.nextTimerDuration = "PT"+duration_s+"S";
      this.environment.variables.nextTimerDuration = "PT1S";
      this.environment.services.console.log(
        "Control loop "+hz+" Hz, target yaw "+targetYawRad.toFixed(3)+" rad, target v="+targetLinear+" m/s, safety "+duration_s+"s."
      );
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0bt1i2p" sourceRef="Activity_1wg18x7" targetRef="Activity_003utbo" />
    <bpmn:scriptTask id="Activity_1yall46" name="turn_right2" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0rrv776</bpmn:incoming>
      <bpmn:outgoing>Flow_0b23o30</bpmn:outgoing>
      <bpmn:script>
      // Assumes: rclnodejs Node is available as this.environment.variables.ros_node
      // Publishes: geometry_msgs/msg/TwistStamped on /cmd_vel
      // Subscribes: nav_msgs/msg/Odometry on /odom

      const node = this.environment.variables.ros_node;

      // ==== User-tunable params ====
      const hz = 200;                      // control loop frequency [Hz]
      const duration_s = 3;                // hard stop safety duration
      const targetYawRad = (3/2)*Math.PI;            // desired yaw (radians). Update at runtime if you like.
      const targetLinear = 1;            // desired forward speed [m/s] (set &gt;0 to drive while holding heading)

      // PID gains for yaw control (start modest; tune on your robot)
      const Kp = 1.8;
      const Ki = 0.1;
      const Kd = 0.0;

      // Output/slew limits
      const maxAngVel = 0.7;               // [rad/s]
      const maxAngAcc = 1.0;               // [rad/s^2] change allowed
      const maxLinVel = 0.7;               // [m/s]
      const maxLinAcc = 0.7;               // [m/s^2]

      // Deadbands and finishing criteria
      const yawDeadband = 0.03;            // [rad] ~0.6°*3
      const finishYawError = 0.02;         // [rad] ~1.1°
      const finishHoldTime_s = 0.3;        // [s] hold within finish error before stopping

      // Watchdog
      const odomTimeout_s = 0.25;          // stop if odom older than this
      const frame_id = "base_link";        // header.frame_id for TwistStamped

      // ==== Helpers ====
      function nowStamp() {
        const ms = Date.now();
        return { sec: Math.floor(ms / 1000), nanosec: (ms % 1000) * 1e6 };
      }
      function normAnglePi(a) {
        // wrap to -pi, pi
        const TWO_PI = Math.PI * 2;
        a = ((a + Math.PI) % TWO_PI + TWO_PI) % TWO_PI - Math.PI;
        return a;
      }
      function quatYaw(q) {
        // q: {x,y,z,w}
        const { x, y, z, w } = q;
        // yaw (Z) from quaternion
        const siny_cosp = 2 * (w * z + x * y);
        const cosy_cosp = 1 - 2 * (y * y + z * z);
        return Math.atan2(siny_cosp, cosy_cosp);
      }
      function clamp(v, lo, hi) { return Math.max(lo, Math.min(hi, v)); }

      // ==== State ====
      let lastOdom = null;      // {t_ms, x,y,theta, vx, wz}
      let lastCmd = { lin: 0, ang: 0 };
      let integ = 0;
      let prevErr = 0;
      let finishStartMs = null;

      // ==== Subscribers ====
      node.createSubscription("nav_msgs/msg/Odometry", "odom", (msg) =&gt; {
        // pull out what we need (avoid keeping the entire message object)
        try {
          const p = msg.pose.pose.position;
          const q = msg.pose.pose.orientation;
          const t = msg.twist.twist;
          const theta = quatYaw(q);
          lastOdom = {
            t_ms: Date.now(),
            x: p.x, y: p.y, theta,
            vx: t.linear.x,
            wz: t.angular.z
          };
          // Optionally expose for debugging
          this.environment.variables.odom_pose = msg.pose;
          this.environment.variables.odom_twist = msg.twist;
        } catch (e) {
          this.environment.services.console.log("Odom parse error: " + e);
        }
      });
      this.environment.services.console.log("Listening for nav_msgs/msg/Odometry on \"odom\".");

      // ==== Publisher ====
      const pub = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      // ==== Timing ====
      const period_s = 1.0 / hz;
      const period_ns_bigint = BigInt(Math.round(1_000_000_000 / hz));
      const duration_ns_bigint = BigInt(Math.round(duration_s * 1_000_000_000));

      // ==== Controller loop ====
      function publishCmd(lin, ang) {
        pub.publish({
          header: { stamp: nowStamp(), frame_id },
          twist: {
            linear: { x: lin, y: 0.0, z: 0.0 },
            angular: { x: 0.0, y: 0.0, z: ang }
          }
        });
        lastCmd = { lin, ang };
      }

      function controlTick() {
        const t_ms = Date.now();

        // Watchdog: stop if odom stale
        if (!lastOdom || (t_ms - lastOdom.t_ms) / 1000.0 &gt; odomTimeout_s) {
          integ = 0; prevErr = 0; finishStartMs = null;
          if (Math.abs(lastCmd.lin) &gt; 1e-6 || Math.abs(lastCmd.ang) &gt; 1e-6) {
            publishCmd(0.0, 0.0);
          }
          return;
        }

        // Yaw control
        const yaw = lastOdom.theta;
        let err = normAnglePi(targetYawRad - yaw);

        // Deadband to avoid chatter
        if (Math.abs(err) &lt; yawDeadband) err = 0;

        // PID with basic anti-windup (only integrate when not saturated later)
        integ += err * period_s;
        const deriv = (err - prevErr) / period_s;
        let u = Kp * err + Ki * integ + Kd * deriv;

        // Saturate angular velocity
        let angCmd = clamp(u, -maxAngVel, +maxAngVel);

        // Anti-windup: if saturated, back off integral a bit
        if (u !== angCmd) {
          // bleed integrator towards zero to prevent windup
          integ *= 0.9;
        }

        // Slew-rate limit angular velocity
        const maxDeltaAng = maxAngAcc * period_s;
        const deltaAng = clamp(angCmd - lastCmd.ang, -maxDeltaAng, +maxDeltaAng);
        angCmd = lastCmd.ang + deltaAng;

        // Linear command with slew &amp; limit
        let linTarget = clamp(targetLinear, -maxLinVel, +maxLinVel);
        const maxDeltaLin = maxLinAcc * period_s;
        const deltaLin = clamp(linTarget - lastCmd.lin, -maxDeltaLin, +maxDeltaLin);
        let linCmd = lastCmd.lin + deltaLin;

        // Finish logic (only if you re doing a point-turn or precise heading)
        const withinFinish = Math.abs(err) &lt;= finishYawError;
        if (withinFinish) {
          if (finishStartMs == null) finishStartMs = t_ms;
          const held_s = (t_ms - finishStartMs) / 1000.0;
          if (held_s &gt;= finishHoldTime_s &amp;&amp; Math.abs(linTarget) &lt; 1e-6) {
            // stop and freeze controller
            publishCmd(0.0, 0.0);
            return;
          }
        } else {
          finishStartMs = null;
        }

        publishCmd(linCmd, angCmd);
      }

      // ROS timer for control loop (BigInt nanoseconds)
      const ctlTimer = node.createTimer(period_ns_bigint, controlTick);

      // Safety timer to stop after duration_s (optional; remove if not desired)
      const stopTimer = node.createTimer(duration_ns_bigint, () =&gt; {
        ctlTimer.cancel();
        publishCmd(0.0, 0.0);
        stopTimer.cancel();
        if (typeof next === "function") next();
      });

      // For visibility in your env
      //this.environment.variables.nextTimerDuration = "PT"+duration_s+"S";
      this.environment.variables.nextTimerDuration = "PT1S";
      this.environment.services.console.log(
        "Control loop "+hz+" Hz, target yaw "+targetYawRad.toFixed(3)+" rad, target v="+targetLinear+" m/s, safety "+duration_s+"s."
      );
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0rrv776" sourceRef="Activity_003utbo" targetRef="Activity_1yall46" />
    <bpmn:scriptTask id="Activity_1izx18n" name="go front3_20sec" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0b23o30</bpmn:incoming>
      <bpmn:outgoing>Flow_0l74yqb</bpmn:outgoing>
      <bpmn:script>
      // Assumes: rclnodejs Node is available as this.environment.variables.ros_node
      // Publishes: geometry_msgs/msg/TwistStamped on /cmd_vel
      // Subscribes: nav_msgs/msg/Odometry on /odom

      const node = this.environment.variables.ros_node;

      // ==== User-tunable params ====
      const hz = 200;                      // control loop frequency [Hz]
      const duration_s = 5;                // hard stop safety duration
      const targetYawRad = Math.PI;            // desired yaw (radians). Update at runtime if you like.
      const targetLinear = 0.0;            // desired forward speed [m/s] (set &gt;0 to drive while holding heading)

      // PID gains for yaw control (start modest; tune on your robot)
      const Kp = 1.8;
      const Ki = 0.1;
      const Kd = 0.0;

      // Output/slew limits
      const maxAngVel = 0.7;               // [rad/s]
      const maxAngAcc = 1.0;               // [rad/s^2] change allowed
      const maxLinVel = 0.7;               // [m/s]
      const maxLinAcc = 0.7;               // [m/s^2]

      // Deadbands and finishing criteria
      const yawDeadband = 0.03;            // [rad] ~0.6°*3
      const finishYawError = 0.02;         // [rad] ~1.1°
      const finishHoldTime_s = 0.3;        // [s] hold within finish error before stopping

      // Watchdog
      const odomTimeout_s = 0.25;          // stop if odom older than this
      const frame_id = "base_link";        // header.frame_id for TwistStamped

      // ==== Helpers ====
      function nowStamp() {
        const ms = Date.now();
        return { sec: Math.floor(ms / 1000), nanosec: (ms % 1000) * 1e6 };
      }
      function normAnglePi(a) {
        // wrap to -pi, pi
        const TWO_PI = Math.PI * 2;
        a = ((a + Math.PI) % TWO_PI + TWO_PI) % TWO_PI - Math.PI;
        return a;
      }
      function quatYaw(q) {
        // q: {x,y,z,w}
        const { x, y, z, w } = q;
        // yaw (Z) from quaternion
        const siny_cosp = 2 * (w * z + x * y);
        const cosy_cosp = 1 - 2 * (y * y + z * z);
        return Math.atan2(siny_cosp, cosy_cosp);
      }
      function clamp(v, lo, hi) { return Math.max(lo, Math.min(hi, v)); }

      // ==== State ====
      let lastOdom = null;      // {t_ms, x,y,theta, vx, wz}
      let lastCmd = { lin: 0, ang: 0 };
      let integ = 0;
      let prevErr = 0;
      let finishStartMs = null;

      // ==== Subscribers ====
      node.createSubscription("nav_msgs/msg/Odometry", "odom", (msg) =&gt; {
        // pull out what we need (avoid keeping the entire message object)
        try {
          const p = msg.pose.pose.position;
          const q = msg.pose.pose.orientation;
          const t = msg.twist.twist;
          const theta = quatYaw(q);
          lastOdom = {
            t_ms: Date.now(),
            x: p.x, y: p.y, theta,
            vx: t.linear.x,
            wz: t.angular.z
          };
          // Optionally expose for debugging
          this.environment.variables.odom_pose = msg.pose;
          this.environment.variables.odom_twist = msg.twist;
        } catch (e) {
          this.environment.services.console.log("Odom parse error: " + e);
        }
      });
      this.environment.services.console.log("Listening for nav_msgs/msg/Odometry on \"odom\".");

      // ==== Publisher ====
      const pub = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      // ==== Timing ====
      const period_s = 1.0 / hz;
      const period_ns_bigint = BigInt(Math.round(1_000_000_000 / hz));
      const duration_ns_bigint = BigInt(Math.round(duration_s * 1_000_000_000));

      // ==== Controller loop ====
      function publishCmd(lin, ang) {
        pub.publish({
          header: { stamp: nowStamp(), frame_id },
          twist: {
            linear: { x: lin, y: 0.0, z: 0.0 },
            angular: { x: 0.0, y: 0.0, z: ang }
          }
        });
        lastCmd = { lin, ang };
      }

      function controlTick() {
        const t_ms = Date.now();

        // Watchdog: stop if odom stale
        if (!lastOdom || (t_ms - lastOdom.t_ms) / 1000.0 &gt; odomTimeout_s) {
          integ = 0; prevErr = 0; finishStartMs = null;
          if (Math.abs(lastCmd.lin) &gt; 1e-6 || Math.abs(lastCmd.ang) &gt; 1e-6) {
            publishCmd(0.0, 0.0);
          }
          return;
        }

        // Yaw control
        const yaw = lastOdom.theta;
        let err = normAnglePi(targetYawRad - yaw);

        // Deadband to avoid chatter
        if (Math.abs(err) &lt; yawDeadband) err = 0;

        // PID with basic anti-windup (only integrate when not saturated later)
        integ += err * period_s;
        const deriv = (err - prevErr) / period_s;
        let u = Kp * err + Ki * integ + Kd * deriv;

        // Saturate angular velocity
        let angCmd = clamp(u, -maxAngVel, +maxAngVel);

        // Anti-windup: if saturated, back off integral a bit
        if (u !== angCmd) {
          // bleed integrator towards zero to prevent windup
          integ *= 0.9;
        }

        // Slew-rate limit angular velocity
        const maxDeltaAng = maxAngAcc * period_s;
        const deltaAng = clamp(angCmd - lastCmd.ang, -maxDeltaAng, +maxDeltaAng);
        angCmd = lastCmd.ang + deltaAng;

        // Linear command with slew &amp; limit
        let linTarget = clamp(targetLinear, -maxLinVel, +maxLinVel);
        const maxDeltaLin = maxLinAcc * period_s;
        const deltaLin = clamp(linTarget - lastCmd.lin, -maxDeltaLin, +maxDeltaLin);
        let linCmd = lastCmd.lin + deltaLin;

        // Finish logic (only if you re doing a point-turn or precise heading)
        const withinFinish = Math.abs(err) &lt;= finishYawError;
        if (withinFinish) {
          if (finishStartMs == null) finishStartMs = t_ms;
          const held_s = (t_ms - finishStartMs) / 1000.0;
          if (held_s &gt;= finishHoldTime_s &amp;&amp; Math.abs(linTarget) &lt; 1e-6) {
            // stop and freeze controller
            publishCmd(0.0, 0.0);
            return;
          }
        } else {
          finishStartMs = null;
        }

        publishCmd(linCmd, angCmd);
      }

      // ROS timer for control loop (BigInt nanoseconds)
      const ctlTimer = node.createTimer(period_ns_bigint, controlTick);

      // Safety timer to stop after duration_s (optional; remove if not desired)
      const stopTimer = node.createTimer(duration_ns_bigint, () =&gt; {
        ctlTimer.cancel();
        publishCmd(0.0, 0.0);
        stopTimer.cancel();
        if (typeof next === "function") next();
      });

      // For visibility in your env
      //this.environment.variables.nextTimerDuration = "PT"+duration_s+"S";
      this.environment.variables.nextTimerDuration = "PT1S";
      this.environment.services.console.log(
        "Control loop "+hz+" Hz, target yaw "+targetYawRad.toFixed(3)+" rad, target v="+targetLinear+" m/s, safety "+duration_s+"s."
      );
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0b23o30" sourceRef="Activity_1yall46" targetRef="Activity_1izx18n" />
    <bpmn:scriptTask id="Activity_1l56vra" name="turn_rigth3" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0l74yqb</bpmn:incoming>
      <bpmn:outgoing>Flow_0tg5tn9</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 0.0; // scale of the speed of the command
      const rot = -1.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 1;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0l74yqb" sourceRef="Activity_1izx18n" targetRef="Activity_1l56vra" />
    <bpmn:scriptTask id="Activity_11y5m4e" name="go front4_2sec" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0tg5tn9</bpmn:incoming>
      <bpmn:outgoing>Flow_0qdpivy</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 1.0; // scale of the speed of the command
      const rot = 0.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 2;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0tg5tn9" sourceRef="Activity_1l56vra" targetRef="Activity_11y5m4e" />
    <bpmn:scriptTask id="Activity_06lxzkv" name="turn_right4" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0qdpivy</bpmn:incoming>
      <bpmn:outgoing>Flow_1080inq</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 0.0; // scale of the speed of the command
      const rot = -1.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 1;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0qdpivy" sourceRef="Activity_11y5m4e" targetRef="Activity_06lxzkv" />
    <bpmn:endEvent id="Event_14bt87m">
      <bpmn:incoming>Flow_1080inq</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_1080inq" sourceRef="Activity_06lxzkv" targetRef="Event_14bt87m" />
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BpmnDiagram_1">
    <bpmndi:BPMNPlane id="BpmnPlane_1" bpmnElement="Process_1">
      <bpmndi:BPMNShape id="StartEvent_1y45yut_di" bpmnElement="StartEvent_1y45yut">
        <omgdc:Bounds x="152" y="102" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <omgdc:Bounds x="134" y="145" width="73" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0q0spcq_di" bpmnElement="Activity_0q0spcq">
        <omgdc:Bounds x="240" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_01al6l1" bpmnElement="Activity_1wg18x7">
        <omgdc:Bounds x="460" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_084s5fl" bpmnElement="Activity_003utbo">
        <omgdc:Bounds x="630" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0zz5fex" bpmnElement="Activity_1yall46">
        <omgdc:Bounds x="780" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1cnx5ca" bpmnElement="Activity_1izx18n">
        <omgdc:Bounds x="940" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0zpwl01" bpmnElement="Activity_1l56vra">
        <omgdc:Bounds x="1080" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0i80xo3" bpmnElement="Activity_11y5m4e">
        <omgdc:Bounds x="1230" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0q5ko9r" bpmnElement="Activity_06lxzkv">
        <omgdc:Bounds x="1370" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_14bt87m_di" bpmnElement="Event_14bt87m">
        <omgdc:Bounds x="1512" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_17sy678_di" bpmnElement="Flow_17sy678">
        <bpmn:omgdi:waypoint x="188" y="120" />
        <bpmn:omgdi:waypoint x="240" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0qr4lpj_di" bpmnElement="Flow_0qr4lpj">
        <bpmn:omgdi:waypoint x="340" y="120" />
        <bpmn:omgdi:waypoint x="460" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0bt1i2p_di" bpmnElement="Flow_0bt1i2p">
        <bpmn:omgdi:waypoint x="560" y="120" />
        <bpmn:omgdi:waypoint x="630" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0rrv776_di" bpmnElement="Flow_0rrv776">
        <bpmn:omgdi:waypoint x="730" y="120" />
        <bpmn:omgdi:waypoint x="780" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0b23o30_di" bpmnElement="Flow_0b23o30">
        <bpmn:omgdi:waypoint x="880" y="120" />
        <bpmn:omgdi:waypoint x="940" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0l74yqb_di" bpmnElement="Flow_0l74yqb">
        <bpmn:omgdi:waypoint x="1040" y="120" />
        <bpmn:omgdi:waypoint x="1080" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tg5tn9_di" bpmnElement="Flow_0tg5tn9">
        <bpmn:omgdi:waypoint x="1180" y="120" />
        <bpmn:omgdi:waypoint x="1230" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0qdpivy_di" bpmnElement="Flow_0qdpivy">
        <bpmn:omgdi:waypoint x="1330" y="120" />
        <bpmn:omgdi:waypoint x="1370" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1080inq_di" bpmnElement="Flow_1080inq">
        <bpmn:omgdi:waypoint x="1470" y="120" />
        <bpmn:omgdi:waypoint x="1512" y="120" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>

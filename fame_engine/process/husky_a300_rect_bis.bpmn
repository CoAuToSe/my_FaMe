<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="sid-38422fae-e03e-43a3-bef4-bd33b32041b2" targetNamespace="http://bpmn.io/bpmn" exporter="bpmn-js-token-simulation" exporterVersion="0.1.5">
  <bpmn:process id="Process_1" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1y45yut" name="start">
      <bpmn:outgoing>Flow_17sy678</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:scriptTask id="Activity_0q0spcq" name="go front1_20sec" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_17sy678</bpmn:incoming>
      <bpmn:outgoing>Flow_0qr4lpj</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      // --- parametres de trajectoire ---
      const vmax = 1.5;        // vitesse lineaire maximale (m/s)
      const rot = 0.0;         // rotation (rad/s)
      const accel_time = 3.0;  // duree d acceleration (s)
      const cruise_time = 5.0; // duree de vitesse constante (s)
      const decel_time = 3.0;  // duree de deceleration (s)

      // --- configuration timer ---
      const hz = 50; // frequence de publication (Hz)
      const hz_bigint = BigInt(String(Math.round(1_000_000_000 / hz)));
      const dt = 1.0 / hz; // intervalle de temps en s

      // --- variables d etat ---
      let tick = 0;
      const total_ticks = Math.round((accel_time + cruise_time + decel_time) * hz);

      // --- fonction de profil vitesse ---
      function computeSpeed(t) {
          if (t &lt; accel_time) {
              // Phase d acceleration lineaire
              return vmax * (t / accel_time);
          } else if (t &lt; accel_time + cruise_time) {
              // Phase à vitesse constante
              return vmax;
          } else if (t &lt; accel_time + cruise_time + decel_time) {
              // Phase de deceleration lineaire
              const t_decel = t - (accel_time + cruise_time);
              return vmax * (1 - t_decel / decel_time);
          } else {
              // Fin du mouvement
              return 0.0;
          }
      }

      // --- publisher periodique ---
      const timer = node.createTimer(hz_bigint, () =&gt; {
          const t = tick * dt;
          const v = computeSpeed(t);

          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              },
              twist: {
                  linear: {x: v, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });

          tick++;
          if (tick &gt; total_ticks) {
              timer.cancel();
              next(); // fin de sequence
          }
      });

      this.environment.services.console.log(
          "Profil vitesse lance : accel="+accel_time+"s, cruise="+cruise_time+"s, decel="+decel_time+"s, vmax="+vmax+" m/s"
      );

      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_17sy678" sourceRef="StartEvent_1y45yut" targetRef="Activity_0q0spcq" />
    <bpmn:scriptTask id="Activity_1wg18x7" name="turn right1" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0qr4lpj</bpmn:incoming>
      <bpmn:outgoing>Flow_0bt1i2p</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 0.0; // scale of the speed of the command
      const rot = -1.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 1;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0qr4lpj" sourceRef="Activity_0q0spcq" targetRef="Activity_1wg18x7" />
    <bpmn:scriptTask id="Activity_003utbo" name="go front2_2sec" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0bt1i2p</bpmn:incoming>
      <bpmn:outgoing>Flow_0rrv776</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 1.0; // scale of the speed of the command
      const rot = 0.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 2;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0bt1i2p" sourceRef="Activity_1wg18x7" targetRef="Activity_003utbo" />
    <bpmn:scriptTask id="Activity_1yall46" name="turn_right2" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0rrv776</bpmn:incoming>
      <bpmn:outgoing>Flow_0b23o30</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 0.0; // scale of the speed of the command
      const rot = -1.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 1;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0rrv776" sourceRef="Activity_003utbo" targetRef="Activity_1yall46" />
    <bpmn:scriptTask id="Activity_1izx18n" name="go front3_20sec" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0b23o30</bpmn:incoming>
      <bpmn:outgoing>Flow_0l74yqb</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 1.5; // scale of the speed of the command
      const rot = 0.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 20/1.5;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0b23o30" sourceRef="Activity_1yall46" targetRef="Activity_1izx18n" />
    <bpmn:scriptTask id="Activity_1l56vra" name="turn_rigth3" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0l74yqb</bpmn:incoming>
      <bpmn:outgoing>Flow_0tg5tn9</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 0.0; // scale of the speed of the command
      const rot = -1.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 1;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0l74yqb" sourceRef="Activity_1izx18n" targetRef="Activity_1l56vra" />
    <bpmn:scriptTask id="Activity_11y5m4e" name="go front4_2sec" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0tg5tn9</bpmn:incoming>
      <bpmn:outgoing>Flow_0qdpivy</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 1.0; // scale of the speed of the command
      const rot = 0.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 2;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0tg5tn9" sourceRef="Activity_1l56vra" targetRef="Activity_11y5m4e" />
    <bpmn:scriptTask id="Activity_06lxzkv" name="turn_right4" scriptFormat="JavaScript">
      <bpmn:incoming>Flow_0qdpivy</bpmn:incoming>
      <bpmn:outgoing>Flow_1080inq</bpmn:outgoing>
      <bpmn:script>
      var node = this.environment.variables.ros_node;
      const publisher = node.createPublisher("geometry_msgs/msg/TwistStamped", "cmd_vel");

      const speed = 0.0; // scale of the speed of the command
      const rot = -1.0; // scale of the rotation of the command // 45� = 0.5 ; 90� = 0.7 ; 180� = 1
      const duration_s = 1;
      // const time_run = 31; // number of time this action will be performed // 45� = 31 ; 90� = 31 ; 180� = 31
      // const time_scale_from_ms = 100; // time between each ticking of the scan of this topic
      // const factor = 4; // depends on the time needed to transmit the information // assure running


      const duration_bigint = BigInt(String(Math.round(duration_s*1_000_000_000)));
      const hz = 200;
      const hz_bigint = BigInt(String(Math.round(1_000_000_000/hz)));
      const period_ms = Math.round(1000 / hz);
      const ticks_total = Math.round(duration_s * hz);

      // const time_in_second = time_run*time_scale_from_ms/1000;
      const time_in_second = 1;

      this.environment.services.console.log("going at "+speed+" m/s and turning at "+rot+" \"&amp;omega;\"/s for "+duration_s+" second.");

      function some() { // p�riode en ms (100ms = 10 Hz)
          publisher.publish({
              header: {
                  stamp: Date.now(),
                  frame_id: "teleop_twist_joy"
              }, 
              twist: {
                  linear: {x: speed, y: 0.0, z: 0.0},
                  angular: {x: 0.0, y: 0.0, z: rot}
              }
          });
      }

      const timer = node.createTimer(hz_bigint, some);

      const timer2 = node.createTimer(duration_bigint, () =&gt; {    
          timer.cancel();          // stoppe le timer ROS  
          timer2.cancel();          // stoppe le timer ROS
          //node.destroy();          // d�truit le node
          //rclnodejs.shutdown();    // ferme le contexte ROS 2
          next();
      });
      this.environment.variables.nextTimerDuration = "PT1S";
      </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:sequenceFlow id="Flow_0qdpivy" sourceRef="Activity_11y5m4e" targetRef="Activity_06lxzkv" />
    <bpmn:endEvent id="Event_14bt87m">
      <bpmn:incoming>Flow_1080inq</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_1080inq" sourceRef="Activity_06lxzkv" targetRef="Event_14bt87m" />
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BpmnDiagram_1">
    <bpmndi:BPMNPlane id="BpmnPlane_1" bpmnElement="Process_1">
      <bpmndi:BPMNShape id="StartEvent_1y45yut_di" bpmnElement="StartEvent_1y45yut">
        <omgdc:Bounds x="152" y="102" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <omgdc:Bounds x="134" y="145" width="73" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0q0spcq_di" bpmnElement="Activity_0q0spcq">
        <omgdc:Bounds x="240" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_01al6l1" bpmnElement="Activity_1wg18x7">
        <omgdc:Bounds x="460" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_084s5fl" bpmnElement="Activity_003utbo">
        <omgdc:Bounds x="630" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0zz5fex" bpmnElement="Activity_1yall46">
        <omgdc:Bounds x="780" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_1cnx5ca" bpmnElement="Activity_1izx18n">
        <omgdc:Bounds x="940" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0zpwl01" bpmnElement="Activity_1l56vra">
        <omgdc:Bounds x="1080" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0i80xo3" bpmnElement="Activity_11y5m4e">
        <omgdc:Bounds x="1230" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0q5ko9r" bpmnElement="Activity_06lxzkv">
        <omgdc:Bounds x="1370" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_14bt87m_di" bpmnElement="Event_14bt87m">
        <omgdc:Bounds x="1512" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_17sy678_di" bpmnElement="Flow_17sy678">
        <bpmn:omgdi:waypoint x="188" y="120" />
        <bpmn:omgdi:waypoint x="240" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0qr4lpj_di" bpmnElement="Flow_0qr4lpj">
        <bpmn:omgdi:waypoint x="340" y="120" />
        <bpmn:omgdi:waypoint x="460" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0bt1i2p_di" bpmnElement="Flow_0bt1i2p">
        <bpmn:omgdi:waypoint x="560" y="120" />
        <bpmn:omgdi:waypoint x="630" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0rrv776_di" bpmnElement="Flow_0rrv776">
        <bpmn:omgdi:waypoint x="730" y="120" />
        <bpmn:omgdi:waypoint x="780" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0b23o30_di" bpmnElement="Flow_0b23o30">
        <bpmn:omgdi:waypoint x="880" y="120" />
        <bpmn:omgdi:waypoint x="940" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0l74yqb_di" bpmnElement="Flow_0l74yqb">
        <bpmn:omgdi:waypoint x="1040" y="120" />
        <bpmn:omgdi:waypoint x="1080" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0tg5tn9_di" bpmnElement="Flow_0tg5tn9">
        <bpmn:omgdi:waypoint x="1180" y="120" />
        <bpmn:omgdi:waypoint x="1230" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0qdpivy_di" bpmnElement="Flow_0qdpivy">
        <bpmn:omgdi:waypoint x="1330" y="120" />
        <bpmn:omgdi:waypoint x="1370" y="120" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1080inq_di" bpmnElement="Flow_1080inq">
        <bpmn:omgdi:waypoint x="1470" y="120" />
        <bpmn:omgdi:waypoint x="1512" y="120" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
